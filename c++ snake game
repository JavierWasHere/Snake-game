#include <SFML/Graphics.hpp>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <fstream>
#include <sstream>

const int WIDTH = 800;
const int HEIGHT = 600;
const int GRID_SIZE = 20;
const int COLUMNS = WIDTH / GRID_SIZE;
const int ROWS = HEIGHT / GRID_SIZE;

enum Direction { Up, Down, Left, Right };
enum GameState { Playing, GameOver, EnterName };

struct SnakeSegment {
    int x, y;
    SnakeSegment(int x, int y) : x(x), y(y) {}
};

class Snake {
public:
    Snake() {
        body.push_back(SnakeSegment(COLUMNS / 2, ROWS / 2));
        dir = Right;
    }

    void setDirection(Direction d) {
        if ((dir == Up && d != Down) ||
            (dir == Down && d != Up) ||
            (dir == Left && d != Right) ||
            (dir == Right && d != Left)) {
            dir = d;
        }
    }

    void move(bool grow = false) {
        SnakeSegment head = body.front();
        switch (dir) {
            case Up: head.y -= 1; break;
            case Down: head.y += 1; break;
            case Left: head.x -= 1; break;
            case Right: head.x += 1; break;
        }
        body.insert(body.begin(), head);
        if (!grow)
            body.pop_back();
    }

    bool checkCollision() {
        SnakeSegment head = body.front();
        if (head.x < 0 || head.y < 0 || head.x >= COLUMNS || head.y >= ROWS)
            return true;
        for (size_t i = 1; i < body.size(); i++) {
            if (head.x == body[i].x && head.y == body[i].y)
                return true;
        }
        return false;
    }

    bool eatFruit(sf::Vector2i fruitPos) {
        SnakeSegment head = body.front();
        return head.x == fruitPos.x && head.y == fruitPos.y;
    }

    void draw(sf::RenderWindow& window) {
        sf::RectangleShape rect(sf::Vector2f(GRID_SIZE - 1, GRID_SIZE - 1));
        rect.setFillColor(sf::Color::Green);
        for (auto& seg : body) {
            rect.setPosition(seg.x * GRID_SIZE, seg.y * GRID_SIZE);
            window.draw(rect);
        }
    }

private:
    std::vector<SnakeSegment> body;
    Direction dir;
public:
    Direction getDirection() { return dir; }
};

sf::Vector2i getRandomFruitPosition() {
    return sf::Vector2i(rand() % COLUMNS, rand() % ROWS);
}

struct HighScore {
    int score = 0;
    std::string name = "Nobody";
};

HighScore loadHighScore(const std::string& filename) {
    std::ifstream file(filename);
    HighScore hs;
    if (file.is_open()) {
        file >> hs.score;
        file >> std::ws;
        std::getline(file, hs.name);
        file.close();
    }
    return hs;
}

void saveHighScore(const std::string& filename, const HighScore& hs) {
    std::ofstream file(filename);
    if (file.is_open()) {
        file << hs.score << "\n" << hs.name << "\n";
        file.close();
    }
}

int main() {
    srand(static_cast<unsigned>(time(nullptr)));

    sf::RenderWindow window(sf::VideoMode(WIDTH, HEIGHT), "Snake Game w/ High Score Name Entry");

    const std::string highScoreFile = "highscore.txt";
    HighScore highScore = loadHighScore(highScoreFile);

    int baseSpeed = 10;
    int level = 1;
    int fruitsEaten = 0;
    int score = 0;
    int frameRate = baseSpeed;

    GameState gameState = Playing;
    bool isNewHighScore = false;
    std::string playerName = "";

    window.setFramerateLimit(frameRate);

    Snake snake;
    sf::Vector2i fruitPos = getRandomFruitPosition();

    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) return -1;

    sf::Text scoreText, levelText, highScoreText, gameOverText, restartText, enterNameText;

    scoreText.setFont(font);
    scoreText.setCharacterSize(20);
    scoreText.setFillColor(sf::Color::White);
    scoreText.setPosition(10, 10);

    levelText.setFont(font);
    levelText.setCharacterSize(20);
    levelText.setFillColor(sf::Color::White);
    levelText.setPosition(10, 40);

    highScoreText.setFont(font);
    highScoreText.setCharacterSize(20);
    highScoreText.setFillColor(sf::Color::White);
    highScoreText.setPosition(10, 70);

    gameOverText.setFont(font);
    gameOverText.setCharacterSize(50);
    gameOverText.setFillColor(sf::Color::Red);
    gameOverText.setString("GAME OVER");
    gameOverText.setPosition(WIDTH / 2 - 150, HEIGHT / 2 - 100);

    restartText.setFont(font);
    restartText.setCharacterSize(20);
    restartText.setFillColor(sf::Color::White);
    restartText.setString("Press R to Restart or Esc to Quit");
    restartText.setPosition(WIDTH / 2 - 150, HEIGHT / 2);

    enterNameText.setFont(font);
    enterNameText.setCharacterSize(25);
    enterNameText.setFillColor(sf::Color::Yellow);
    enterNameText.setPosition(WIDTH / 2 - 200, HEIGHT / 2 - 40);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            if (event.type == sf::Event::KeyPressed) {
                if (gameState == Playing) {
                    if (event.key.code == sf::Keyboard::Up) snake.setDirection(Up);
                    if (event.key.code == sf::Keyboard::Down) snake.setDirection(Down);
                    if (event.key.code == sf::Keyboard::Left) snake.setDirection(Left);
                    if (event.key.code == sf::Keyboard::Right) snake.setDirection(Right);
                } else if (gameState == GameOver) {
                    if (event.key.code == sf::Keyboard::R) {
                        snake = Snake();
                        fruitPos = getRandomFruitPosition();
                        score = 0;
                        level = 1;
                        fruitsEaten = 0;
                        frameRate = baseSpeed;
                        window.setFramerateLimit(frameRate);
                        gameState = Playing;
                    }
                    if (event.key.code == sf::Keyboard::Escape)
                        window.close();
                }
            }

            if (gameState == EnterName && event.type == sf::Event::TextEntered) {
                if (event.text.unicode == '\b') {
                    if (!playerName.empty()) playerName.pop_back();
                } else if (event.text.unicode == '\r' || event.text.unicode == '\n') {
                    highScore.score = score;
                    highScore.name = playerName.empty() ? "Anonymous" : playerName;
                    saveHighScore(highScoreFile, highScore);
                    gameState = GameOver;
                } else if (playerName.size() < 15 && event.text.unicode >= 32 && event.text.unicode <= 126) {
                    playerName += static_cast<char>(event.text.unicode);
                }
            }
        }

        if (gameState == Playing) {
            bool grow = snake.eatFruit(fruitPos);
            if (grow) {
                score += 10;
                fruitsEaten++;
                fruitPos = getRandomFruitPosition();
                if (fruitsEaten % 5 == 0) {
                    level++;
                    frameRate += 2;
                    window.setFramerateLimit(frameRate);
                }
            }
            snake.move(grow);
            if (snake.checkCollision()) {
                if (score > highScore.score) {
                    isNewHighScore = true;
                    playerName = "";
                    gameState = EnterName;
                } else {
                    gameState = GameOver;
                }
            }
        }

        window.clear();

        if (gameState == Playing) {
            sf::RectangleShape fruit(sf::Vector2f(GRID_SIZE - 1, GRID_SIZE - 1));
            fruit.setFillColor(sf::Color(255, 100 + (level * 15) % 155, 100));
            fruit.setPosition(fruitPos.x * GRID_SIZE, fruitPos.y * GRID_SIZE);
            window.draw(fruit);

            snake.draw(window);

            scoreText.setString("Score: " + std::to_string(score));
            levelText.setString("Level: " + std::to_string(level));
            highScoreText.setString("High Score: " + std::to_string(highScore.score) + " (" + highScore.name + ")");

            window.draw(scoreText);
            window.draw(levelText);
            window.draw(highScoreText);
        } else if (gameState == GameOver) {
            window.draw(gameOverText);
            window.draw(restartText);
        } else if (gameState == EnterName) {
            std::stringstream ss;
            ss << "New High Score! Enter Name: " << playerName << "_";
            enterNameText.setString(ss.str());
            window.draw(enterNameText);
        }

        window.display();
    }

    return 0;
}
